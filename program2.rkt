
(define read-input-file
  (lambda (name)
    (let ((p (open-input-file name)))
      (define read-file
        (lambda (x)
          (if (eof-object? x)
              (begin
                (close-input-port p)
                '())
              (cons x (read-file (read-char p))))))
      (read-file (read-char p)))))


(define (make-stack)
  (let ((stack '()))
    (lambda (cmd . args)
      (cond 
        ((eq? cmd 'pop!)
         (if (null? stack) '()
             (let ((pop (car stack)))
               (set! stack (cdr stack))
               pop)))
        ((eq? cmd 'push!) (set! stack (append (reverse args) stack)))
        ((eq? cmd 'peek) (car stack))
        ((eq? cmd 'reverse!) (set! stack (reverse stack)))
        ((eq? cmd 'get-stack) stack)
        (else "Invalid stack command.")))))


(define code-stream
  (let ((name "code"))
    (define read-next
      (lambda (word word-ls str-ls)
        (define get-char
          (if (not (null? str-ls)) (car (string->list (car str-ls)))))
        
        (cond ((null? str-ls) (if (number? (string->number word))
                                  (read-next "number" word-ls str-ls)
                                  (append word-ls (list word))))
              ((char=? #\return get-char)
               (read-next word word-ls (cdr str-ls)))
              ((or (char-whitespace? get-char)
                   (char=? #\newline get-char))
               (if (number? (string->number word))
                   (read-next "numeric" word-ls str-ls)
                   (read-next "" (append word-ls (list word)) (cdr str-ls))))
              ((char-upper-case? get-char)
               (read-next (string-append word "id") word-ls (cdr str-ls)))
              (else (read-next (string-append word (car str-ls)) word-ls (cdr str-ls))))))
    (let ((ls (read-next "" '() (map string (read-input-file name)))))
      (define stack (make-stack))
      (map (lambda x (stack 'push! (car x))) ls)
      (stack 'reverse!)
      stack)))


(define parse-stack (make-stack))
(parse-stack 'push!  '"$$" '"program")
(define parse-stack-out (make-stack))
(define input-stream (make-stack))
(input-stream 'push! (code-stream 'peek))
(define comment (make-stack))
(comment 'push! '"initial stack contents")
(define error "error")
(define fin "fin")


(define match-token?
  (lambda (word)
    (define run-through
      (lambda (ls)
        (cond ((null? ls) #f)
              ((string=? (car ls) word) #t)
              (else (run-through (cdr ls))))))
    (run-through '("id" "number" "read" "write" ":=" "(" ")" "+" "-" "*" "/" "$$"))))


(define get-cmd
  (lambda (word)
    (let ((matcher (code-stream 'peek)))
      (cond ((string=? "program" word)
             (cond ((string=? matcher "id") 1)
                   ((string=? matcher "read") 1)
                   ((string=? matcher "write") 1)
                   ((string=? matcher "$$") 1)
                   (else error)))
            ((string=? "stmt_list" word)
             (cond ((string=? matcher "id") 2)
                   ((string=? matcher "read") 2)
                   ((string=? matcher "write") 2)
                   ((string=? matcher "$$") 3)
                   (else error)))
            ((string=? "stmt" word)
             (cond ((string=? matcher "id") 4)
                   ((string=? matcher "read") 5)
                   ((string=? matcher "write") 6)
                   (else error)))
            ((string=? "expr" word)
             (cond ((string=? matcher "id") 7)
                   ((string=? matcher "number") 7)
                   ((string=? matcher "(") 7)
                   (else error)))
            ((string=? "term_tail" word)
             (cond ((string=? matcher "id") 9)
                   ((string=? matcher "read") 9)
                   ((string=? matcher "write") 9)
                   ((string=? matcher ")") 9)
                   ((string=? matcher "+") 8)
                   ((string=? matcher "-") 8)
                   ((string=? matcher "$$") 9)
                   (else error)))
            ((string=? "term" word)
             (cond ((string=? matcher "id") 10)
                   ((string=? matcher "number") 10)
                   ((string=? matcher "(") 10)
                   (else error)))
            ((string=? "factor_tail" word)
             (cond ((string=? matcher "id") 9)
                   ((string=? matcher "read") 9)
                   ((string=? matcher "write") 9)
                   ((string=? matcher ")") 9)
                   ((string=? matcher "+") 8)
                   ((string=? matcher "-") 8)
                   ((string=? matcher "*") 8)
                   ((string=? matcher "/") 8)
                   ((string=? matcher "$$") 9)
                   (else error)))
            ((string=? "factor" word)
             (cond ((string=? matcher "id") 14)
                   ((string=? matcher "number") 15)
                   ((string=? matcher "(") 13)
                   (else error)))
            ((string=? "add_op" word)
             (cond ((string=? matcher "+") 16)
                   ((string=? matcher "-") 17)
                   (else error)))
            ((string=? "mult_op" word)
             (cond (string=? 18)
                   ((string=? matcher "/") 19)
                   (else error)))
            (else (match-token? word))))))


(let walk-through ()
  (let* ((stack (parse-stack 'get-stack))
         (head (parse-stack 'pop!))
         (cmd (get-cmd head))
         (token (code-stream 'pop!)))
    (parse-stack-out 'push! stack)
    (input-stream 'push! token)
    (cond ((null? head) fin)
          (else (cond ((number? cmd)
                       (code-stream 'push! token)
                       (case cmd
                         ((1) (parse-stack 'push! '"stmt_list")
                              (walk-through))
                         ((2) (parse-stack 'push! '"stmt_list" '"stmt")
                              (comment 'push! '"predict 2")
                              (walk-through))
                         ((3) (comment 'push! '"predict 3")
                              (walk-through))
                         ((4) (parse-stack 'push! '"expr" '":=" '"id")
                              (comment 'push! '"predict 4")
                              (walk-through))
                         ((5) (parse-stack 'push! '"id" '"read")
                              (comment 'push! '"predict 5")
                              (walk-through))
                         ((6) (parse-stack 'push! '"expr" '"write")
                              (comment 'push! '"predict 6")
                              (walk-through))
                         ((7) (parse-stack 'push! '"term_tail" '"term")
                              (comment 'push! '"predict 7")
                              (walk-through))
                         ((8) (parse-stack 'push! '"term_tail" '"term" '"add_op")
                              (comment 'push! '"predict 8")
                              (walk-through))
                         ((9) (comment 'push! '"predict 9")
                              (walk-through))
                         ((10) (parse-stack 'push! '"factor_tail" '"factor")
                               (comment 'push! '"predict 10")
                               (walk-through))
                         ((11) (parse-stack 'push! '"factor_tail" '"factor" '"mult_op")
                               (comment 'push! '"predict 11")
                               (walk-through))
                         ((12) (comment 'push! '"predict 12")
                               (walk-through))
                         ((13) (parse-stack 'push! '")" '"expr" '"(")
                               (comment 'push! '"predict 13")
                               (walk-through))
                         ((14) (parse-stack 'push! '"id")
                               (comment 'push! '"predict 14")
                               (walk-through))
                         ((15) (parse-stack 'push! '"number")
                               (comment 'push! '"predict 15")
                               (walk-through))
                         ((16) (parse-stack 'push! '"+")
                               (comment 'push! '"predict 16")
                               (walk-through))
                         ((17) (parse-stack 'push! '"-")
                               (comment 'push! '"predict 17")
                               (walk-through))
                         ((18) (parse-stack 'push! '"*")
                               (comment 'push! '"predict 18")
                               (walk-through))
                         ((19) (parse-stack 'push! '"number")
                               (comment 'push! '"predict 19")
                               (walk-through))))
                      ((eq? cmd #t) (comment 'push! (string-append "match " token))
                                    (walk-through))
                      (else error))))))
